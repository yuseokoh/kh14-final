<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<!-- 전체 회원 조회 -->
	<select id="list" resultType="MemberDto">
		SELECT * FROM member
	</select>

	<!-- 특정 컬럼과 키워드를 이용한 검색 -->
	<select id="search" resultType="MemberDto">
		SELECT * FROM member WHERE instr(${column}, #{keyword}) > 0
	</select>

	<!-- 조건을 이용한 검색 -->
	<select id="listSearch" resultType="MemberDto"> SELECT * FROM member <if
			test="column != null and keyword != null">
			WHERE instr(${column}, #{keyword}) > 0
		</if>
	</select>

	<!-- 복합 검색 -->
	<select id="complexSearch" resultType="MemberDto">
		<include refid="top-n-header" /> SELECT * FROM member <where>
			<if test="memberId != null">
				AND member_id LIKE #{memberId} || '%'
			</if>
			<if test="memberNickname != null">
				AND member_nickname LIKE #{memberNickname} || '%'
			</if>
			<if test="memberBirth != null">
				AND member_birth = #{memberBirth}
			</if>
			<if test="memberContact != null">
				AND instr(member_contact, #{memberContact}) > 0
			</if>
			<if test="memberEmail != null">
				AND instr(member_email, #{memberEmail}) > 0
			</if>
			<choose>
				<when test="minMemberPoint != null and maxMemberPoint != null">
		AND member_point BETWEEN #{minMemberPoint} AND #{maxMemberPoint}
				</when>
				<when test="minMemberPoint != null">
                    <![CDATA[ AND member_point >= #{minMemberPoint} ]]>
                </when>
				<when test="maxMemberPoint != null">
                    <![CDATA[ AND member_point <= #{maxMemberPoint} ]]>
                </when>
			</choose>

			<choose>
				<when test="beginMemberJoin != null and endMemberJoin != null">
		AND (member_join BETWEEN to_date(#{beginMemberJoin} || ' ' ||
					'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					AND to_date(#{endMemberJoin} || ' ' || '23:59:59',
		'YYYY-MM-DD HH24:MI:SS'))
				</when>
				<when test="beginMemberJoin != null">
                    <![CDATA[ AND member_join >= to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
				<when test="endMemberJoin != null">
                    <![CDATA[ AND member_join <= to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
			</choose>
			<choose>
				<when test="beginMemberLogin != null and endMemberLogin != null">
		AND (member_login BETWEEN to_date(#{beginMemberLogin} || ' ' ||
		'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					AND to_date(#{endMemberLogin} || ' ' || '23:59:59',
		'YYYY-MM-DD HH24:MI:SS'))
				</when>
				<when test="beginMemberLogin != null">
                    <![CDATA[ AND member_login >= to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
				<when test="endMemberLogin != null">
                    <![CDATA[ AND member_login <= to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
			</choose>
			<if test="memberLevelList != null and memberLevelList.size() > 0">
		AND member_level IN <foreach item="memberLevel"
					collection="memberLevelList" open="(" separator=","
					close=")">
					#{memberLevel}
				</foreach>
			</if>
			<if test="memberAddress != null">
				AND (
				instr(member_post, #{memberAddress}) > 0
				OR instr(member_address1, #{memberAddress}) > 0
				OR instr(member_address2, #{memberAddress}) > 0
				)
			</if>
		</where>
        <choose>
			<when test="orderList != null and orderList.size() > 0"> ORDER BY <foreach
					item="orderItem" collection="orderList" separator=",">
		${orderItem}
				</foreach>
			</when>
			<otherwise>
				ORDER BY member_id ASC
			</otherwise>
		</choose>
        <include
			refid="top-n-footer" />
	</select>

	<!-- 페이징을 위한 카운트 계산 구문 -->
	<select id="complexSearchCount" resultType="int"> SELECT count(*) FROM
		member <where>
			<if test="memberId != null">
				AND member_id LIKE #{memberId} || '%'
			</if>
			<if test="memberNickname != null">
				AND member_nickname LIKE #{memberNickname} || '%'
			</if>
			<if test="memberBirth != null">
				AND member_birth = #{memberBirth}
			</if>
			<if test="memberContact != null">
				AND instr(member_contact, #{memberContact}) > 0
			</if>
			<if test="memberEmail != null">
				AND instr(member_email, #{memberEmail}) > 0
			</if>
			<choose>
				<when test="minMemberPoint != null and maxMemberPoint != null">
		AND member_point BETWEEN #{minMemberPoint} AND #{maxMemberPoint}
				</when>
				<when test="minMemberPoint != null">
                    <![CDATA[ AND member_point >= #{minMemberPoint} ]]>
                </when>
				<when test="maxMemberPoint != null">
                    <![CDATA[ AND member_point <= #{maxMemberPoint} ]]>
                </when>
			</choose>
			<choose>
				<when test="beginMemberJoin != null and endMemberJoin != null">
		AND (member_join BETWEEN to_date(#{beginMemberJoin} || ' ' ||
					'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					AND to_date(#{endMemberJoin} || ' ' || '23:59:59',
		'YYYY-MM-DD HH24:MI:SS'))
				</when>
				<when test="beginMemberJoin != null">
                    <![CDATA[ AND member_join >= to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
				<when test="endMemberJoin != null">
                    <![CDATA[ AND member_join <= to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
			</choose>
			<choose>
				<when test="beginMemberLogin != null and endMemberLogin != null">
		AND (member_login BETWEEN to_date(#{beginMemberLogin} || ' ' ||
		'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
					AND to_date(#{endMemberLogin} || ' ' || '23:59:59',
		'YYYY-MM-DD HH24:MI:SS'))
				</when>
				<when test="beginMemberLogin != null">
                    <![CDATA[ AND member_login >= to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
				<when test="endMemberLogin != null">
                    <![CDATA[ AND member_login <= to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
                </when>
			</choose>
			<if test="memberLevelList != null and memberLevelList.size() > 0">
		AND member_level IN <foreach item="memberLevel"
					collection="memberLevelList" open="(" separator=","
					close=")">
					#{memberLevel}
				</foreach>
			</if>
			<if test="memberAddress != null">
				AND (
				instr(member_post, #{memberAddress}) > 0
				OR instr(member_address1, #{memberAddress}) > 0
				OR instr(member_address2, #{memberAddress}) > 0
				)
			</if>
		</where>
	</select>

	<!-- 회원 등록(가입) -->
	<insert id="add" parameterType="MemberDto">
		INSERT INTO member (
		member_id,
		member_pw,
		member_email,
		member_level
		) VALUES (
		#{memberId},
		#{memberPw},
		#{memberEmail},
		#{memberLevel}
		)
	</insert>

	<!-- 회원 상세 조회 -->
	<select id="find" parameterType="string" resultType="MemberDto">
		SELECT * FROM member WHERE member_id = #{memberId}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="changePw">
		UPDATE member SET member_pw = #{memberPw} WHERE member_id = #{memberId}
	</update>

	<!-- 회원 정보 수정 -->
	<update id="edit"> UPDATE member <set>
			<if test="memberNickname != null">member_nickname =
		#{memberNickname},</if>
			<if test="memberEmail != null">member_email = #{memberEmail},</if>
			<if test="memberPost != null">member_post = #{memberPost},</if>
			<if test="memberAddress1 != null">member_address1 =
		#{memberAddress1},</if>
			<if test="memberAddress2 != null">member_address2 =
		#{memberAddress2},</if>
			<if test="memberContact != null">member_contact = #{memberContact},</if>
			<if test="memberBirth != null">member_birth = #{memberBirth},</if>
			<if test="memberLevel != null">member_level = #{memberLevel},</if>
			<if test="verificationToken != null">verification_token =
		#{verificationToken},</if>
			<if test="emailVerified != null">email_verified = #{emailVerified},</if>
			<if test="memberPoint != null">member_point = #{memberPoint}</if>
		</set>
		WHERE member_id = #{memberId} </update>

	<!-- 회원 정보 삭제 -->
	<delete id="remove">
		DELETE FROM member WHERE member_id = #{memberId}
	</delete>

	<!-- 최종 로그인 시각 갱신 -->
	<update id="updateLoginTime">
		UPDATE member SET member_login = sysdate WHERE member_id = #{memberId}
	</update>

	<!-- 최종 로그아웃 시각 갱신 -->
	<update id="updateLogoutTime">
		UPDATE member SET member_logout = sysdate WHERE member_id = #{memberId}
	</update>

	<!-- 이메일로 회원 찾기 -->
	<select id="findByEmail" parameterType="string" resultType="MemberDto">
		SELECT * FROM member WHERE member_email = #{memberEmail}
	</select>

	<select id="selectOneByEmail" parameterType="String" resultType="MemberDto">
		SELECT * FROM member WHERE member_email = #{memberEmail}
	</select>

	<insert id="addKakaoUserWithDetails" parameterType="MemberDto">
		INSERT INTO member (member_id, member_email, member_nickname,
		member_level, member_pw)
		VALUES (#{memberId}, #{memberEmail}, #{memberNickname}, #{memberLevel},
		#{memberPw})
	</insert>

	<insert id="addWithKakao" parameterType="MemberDto">
		INSERT INTO member (member_id, member_email, member_nickname,
		member_level)
		VALUES (#{memberId}, #{memberEmail}, #{memberNickname}, #{memberLevel})
	</insert>

	<insert id="insertWithKakao" parameterType="KakaoUserDto">
		INSERT INTO member (member_id, member_email, member_nickname,
		member_level)
		VALUES (#{memberId}, #{memberEmail}, #{memberNickname}, '카카오 회원')
	</insert>

	<select id="selectOneByKakaoId" parameterType="string"
		resultType="MemberDto">
		SELECT * FROM member WHERE linked_member_id = (SELECT member_id FROM
		kakao_user WHERE kakao_id = #{kakaoId})
	</select>

	<update id="updateLinkedMemberId">
		UPDATE member
		SET linked_member_id = #{linkedMemberId}
		WHERE member_id = #{memberId}
	</update>

	<update id="updateMemberEmailByKakaoId">
		UPDATE member
		SET member_email = #{email}
		WHERE linked_member_id = (SELECT member_id FROM kakao_user WHERE
		kakao_id = #{kakaoId})
	</update>

	<update id="updateWithKakao">
		UPDATE member
		SET member_nickname = #{memberNickname}, member_email = #{memberEmail}
		WHERE linked_member_id = #{linkedMemberId}
	</update>

	<update id="updateMemberEmail" parameterType="MemberDto">
		UPDATE member
		SET member_email = #{memberEmail}
		WHERE linked_member_id = #{linkedMemberId}
	</update>

	<select id="findByLinkedMemberId" parameterType="string"
		resultType="MemberDto">
		SELECT * FROM member WHERE linked_member_id = #{linkedMemberId}
	</select>

	<select id="selectOneById" parameterType="string" resultType="MemberDto">
		SELECT * FROM member WHERE member_id = #{memberId}
	</select>

	<!-- Kakao ID로 MemberDto 조회 -->
	<select id="selectOneByLinkedMemberId" parameterType="string"
		resultType="MemberDto">
		SELECT *
		FROM member
		WHERE linked_member_id = (SELECT member_id FROM kakao_user WHERE
		kakao_id = #{kakaoId})
	</select>

	<select id="selectByMemberId" parameterType="String" resultType="MemberDto">
		SELECT * FROM member WHERE member_id = #{memberId}
	</select>

	<select id="selectMemberWithKakaoInfo" resultType="com.game.dto.MemberDto">
		SELECT m.*, k.kakao_id
		FROM member m
		LEFT JOIN kakao_user k ON m.linked_member_id = k.member_id
		WHERE k.kakao_id = #{kakaoId}
	</select>

	<select id="selectOneByKakaoUserId" parameterType="string"
		resultType="MemberDto">
		SELECT m.*
		FROM member m
		JOIN kakao_user ku ON ku.linked_member_id = m.member_id
		WHERE ku.kakao_id = #{kakaoId}
	</select>


	<update id="updateEmailByLinkedMemberId">
		UPDATE member
		SET member_email = #{memberEmail}
		WHERE linked_member_id = #{linkedMemberId}
	</update>

	<delete id="deleteByKakaoId" parameterType="String">
		DELETE FROM member WHERE linked_member_id = (SELECT member_id FROM
		kakao_user WHERE kakao_id = #{kakaoId})
	</delete>
	
	<!-- 중복된 member_id 또는 member_email 확인 -->
	<select id="checkMemberExists" parameterType="MemberDto" resultType="int">
		SELECT COUNT(*) FROM member WHERE member_id = #{memberId} OR
		member_email = #{memberEmail}
	</select>

	<!-- 회원 정보 수정 (기존 사용자인 경우) -->
	<update id="updateMember" parameterType="MemberDto">
		UPDATE member
		SET
		member_pw = #{memberPw},
		member_email = #{memberEmail},
		member_level = #{memberLevel}
		WHERE member_id = #{memberId}
	</update>


	<!-- 자주 사용하는 SQL 조각들 (Top N Query) -->
	<sql id="top-n-header">
		<if test="beginRow != null and endRow != null">
			SELECT * FROM (
			SELECT rownum rn, TMP.* FROM (
		</if>
	</sql>

	<sql id="top-n-footer">
		<if test="beginRow != null and endRow != null">
			) TMP
			)
			WHERE rn BETWEEN #{beginRow} AND #{endRow}
		</if>
	</sql>
	
	<select id="selectDeveloperRequests" resultType="MemberDto">
	    SELECT *
	    FROM member 
	    WHERE member_level = '일반회원' 
	    AND developer_request = 1
	    ORDER BY developer_request_date DESC
	</select>
	
	<update id="updateDeveloperRequest" parameterType="map">
	    UPDATE member 
	    SET developer_request = #{developerRequest},
	        developer_request_date = #{developerRequestDate}
	    WHERE member_id = #{memberId}
	</update>
	
	<!-- 회원 레벨 및 개발자 요청 상태 업데이트 -->
	<update id="updateMemberLevel" parameterType="map">
	    UPDATE member 
	    SET member_level = #{memberLevel},
	        developer_request = #{developerRequest},
	        developer_request_date = #{developerRequestDate}
	    WHERE member_id = #{memberId}
	</update>

	<select id="selectOneByKakaoId2" resultType="MemberDto">
		select * from member where kakao_id = #{kakaoId}
	</select>

	<select id="selectOneByEmail2" resultType="MemberDto">
		select * from member where member_email = #{memberEmail}
	</select>

</mapper>
